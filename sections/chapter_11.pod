=head0 What to Avoid

Perl is a malleable language. You can write programs in whichever creative,
maintainable, obfuscated, or bizarre fashion you prefer. Good programmers write
code that they want to maintain, but Perl won't decide for you what I<you>
consider maintainable.

Perl isn't perfect. Some features are difficult to use correctly. Others seem
great but don't work all that well. Some have strange edge cases. Knowing what
to avoid in Perl--and when to avoid it--will help you write robust code that
survives the twin tests of time and real users.

L<barewords>

L<indirect_objects>

L<prototypes>

L<method_sub_equivalence>

L<automatic_dereferencing>

L<tie>
