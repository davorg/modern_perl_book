=head1 Moose

Z<moose>

X<moose>

Perl's default object system is minimal but flexible. Its syntax is a little
clunky, and it exposes I<how> an object system works. You can build great
things on top of it, but it doesn't give you what many other languages do by
default.

I<Moose> is a complete object system for Perl. It's a complete distribution
available from the CPAN--not a part of the core language, but worth installing
and using regardless. Moose offers both a simpler way to use an object system
as well as advanced features of languages such as Smalltalk and Common Lisp.

Moose objects work with plain vanilla Perl. Within your programs, you can mix
and match objects written with Perl's default object system and Moose.

X<CPAN; C<Moose>>
X<CPAN; C<Moose::Manual>>

=begin tip Moose Documentation

See C<Moose::Manual> on the CPAN for comprehensive Moose documentation.

=end tip

=head2 Classes

X<classes>
X<builtins; C<package>>

A Moose object is a concrete instance of a I<class>, which is a template
describing data and behavior specific to the object. A class generally belongs
to a package (L<packages>), which provides its name:

=begin programlisting

    package Cat {
        use Moose;
    }

=end programlisting

X<OO; instances>

This C<Cat> class I<appears> to do nothing, but that's all Moose needs to make
a class. Create objects (or I<instances>) of the C<Cat> class with the syntax:

=begin programlisting

    my $brad = Cat->new;
    my $jack = Cat->new;

=end programlisting

In the same way that this arrow operator dereferences a reference, it calls a
method on C<Cat>.

=head2 Methods

X<OO; methods>
X<OO; invocants>

A I<method> is a function associated with a class. In the same way that a
function belongs to a namespace, a method belongs to a class.

When you call a method, you do so with an I<invocant>. When you call C<new()>
on C<Cat>, the name of the class, C<Cat>, is C<new()>'s invocant. Think of this
as sending a message to a class: "do whatever C<new()> does." In this case,
calling the C<new()> method--sending the C<new> message--returns a new object
of the C<Cat> class.

When you call a method on an I<object>, that object is the invocant:

=begin programlisting

    my $choco = B<Cat>->new;
    B<$choco>->sleep_on_keyboard;

=end programlisting

A method's first argument is its invocant (C<$self>, by convention). Suppose a
C<Cat> can C<meow()>:

=begin programlisting

    package Cat {
        use Moose;

        B<sub meow {>
            B<my $self = shift;>
            B<say 'Meow!';>
        B<}>
    }

=end programlisting

Now any C<Cat> instance can wake you for its early morning feeding:

=begin programlisting

    # the cat always meows three times at 6 am
    my $fuzzy_alarm = Cat->new;
    $fuzzy_alarm->meow for 1 .. 3;

=end programlisting

X<class method>
X<instance method>
X<OO; class methods>
X<OO; instance methods>
X<methods; class>
X<methods; instance>

Every object can have its own distinct data. Methods which read or write the
data of their invocants are I<instance methods>; they depend on the presence of
an appropriate invocant to work correctly. Methods (such as C<meow()>) which do
not access instance data are I<class methods>. You may invoke class methods on
classes and class and instance methods on instances, but you cannot invoke
instance methods on classes.

Class methods are effectively namespaced global functions. Without access to
instance data, they have few advantages over namespaced functions. Most OO code
uses instance methods to read and write instance data.

X<methods; constructor>

I<Constructors>, which I<create> instances, are class methods. When you declare
a Moose class, Moose provides a default constructor named C<new()>.

=head2 Attributes

X<attributes; objects>
X<OO; attributes>
X<OO; state>
X<attributes; typed>
X<attributes; C<ro> (read only)>

Every Perl object is unique. Objects can contain private data associated with
each unique object--often called I<attributes>, I<instance data>, or object
I<state>. Define an attribute by declaring it as part of the class:

=begin programlisting

    package Cat {
        use Moose;

        B<< has 'name', is => 'ro', isa => 'Str'; >>
    }

=end programlisting

Moose exports the C<has()> function for you to use to declare an attribute. In
English, this code reads "C<Cat> objects have a C<name> attribute. It's
read-only, and is a string." The first argument, C<'name'>, is the attribute's
name. The C<< is => 'ro' >> pair of arguments declares that this attribute is
C<r>ead C<o>nly, so you cannot modify the attribute's value after you've set
it. Finally, the C<< isa => 'Str' >> pair declares that the value of this
attribute can only be a C<Str>ing.

X<methods; accessor>
X<OO; accessor methods>

From this code Moose creates an I<accessor> method named C<name()> and allows
you to pass a C<name> parameter to C<Cat>'s constructor:

=begin programlisting

    for my $name (qw( Tuxie Petunia Daisy )) {
        my $cat = Cat->new( name => $name );
        say "Created a cat for ", $cat->name;
    }

=end programlisting

Moose's documentation uses parentheses to separate attribute names and
characteristics:

=begin programlisting

    has 'name' => ( is => 'ro', isa => 'Str' );

=end programlisting

This is equivalent to:

=begin programlisting

    has( 'name', 'is', 'ro', 'isa', 'Str' );

=end programlisting

Moose's approach works nicely for complex declarations:

=begin programlisting

    has 'name' => (
        is         => 'ro',
        isa        => 'Str',

        # advanced Moose options; perldoc Moose
        init_arg   => undef,
        lazy_build => 1,
    );

=end programlisting

... while this book prefers a low-punctuation approach for simple declarations.
Choose the style which offers you the most clarity.

X<attributes; untyped>

When an attribute declaration has a type, Moose will attempt to validate all
values assigned to that attribute. Sometimes this strictness is invaluable.
While Moose will complain if you try to set C<name> to a value which isn't a
string, attributes do not I<require> types. In that case, anything goes:

=begin programlisting

    package Cat {
        use Moose;

        has 'name', is => 'ro', isa => 'Str';
        B<< has 'age',  is => 'ro'; >>
    }

    my $invalid = Cat->new( name => 'bizarre', age  => 'purple' );

=end programlisting

X<attributes; C<rw> (read-write)>
X<methods; mutator>
X<OO; mutator methods>

If you mark an attribute as readable I<and> writable (with C<< is => rw >>),
Moose will create a I<mutator> method which can change that attribute's value:

=begin programlisting

    package Cat {
        use Moose;

        has 'name', is => 'ro', isa => 'Str';
        has 'age',  is => 'ro', isa => 'Int';
        B<< has 'diet', is => 'rw'; >>
    }

    my $fat = Cat->new( name => 'Fatty',
                        age  => 8,
                        diet => 'Sea Treats' );

    say $fat->name, ' eats ', $fat->diet;

    B<< $fat->diet( 'Low Sodium Kitty Lo Mein' ); >>
    say $fat->name, ' now eats ', $fat->diet;

=end programlisting

An C<ro> accessor used as a mutator will throw the exception C<Cannot assign a
value to a read-only accessor at ...>.

Using C<ro> or C<rw> is a matter of design, convenience, and purity. Moose
enforces no single philosophy here. Some people suggest making all instance
data C<ro> such that you must pass instance data into the constructor
(L<immutability>). In the C<Cat> example, C<age()> might still be an accessor,
but the constructor could take the I<year> of the cat's birth and calculate the
age itself based on the current year. This approach consolidates validation
code and ensures that all objects have valid data after creation.

This illustrates a subtle but important principle of object orientation. An
object contains related data and can perform behaviors with and on that data. A
class describes that data and those behaviors. You can have multiple
independent objects with separate instance data and treat all of those objects
the same way; they will behave differently depending on their instance data.

=head2 Encapsulation

X<encapsulation>
X<OO; encapsulation>

Moose allows you to declare I<which> attributes class instances possess (a cat
has a name) as well as the attributes of those attributes (you can name a cat
once and thereafter its name cannot change). Moose itself decides how to
I<store> those attributes--you access them through accessors. This is
I<encapsulation>: hiding the internal details of an object from external users
of that object.

Consider the aforementioned idea to change how C<Cat>s manage their ages by
passing in the year of the cat's birth and calculating the age as needed:

=begin programlisting

    package Cat {
        use Moose;

        has 'name',        is => 'ro', isa => 'Str';
        has 'diet',        is => 'rw';
        B<< has 'birth_year',  is => 'ro', isa => 'Int'; >>

        B<sub age {>
            B<my $self = shift;>
            B<my $year = (localtime)[5] + 1900;>

            B<< return $year - $self->birth_year; >>
        B<}>
    }

=end programlisting

While the syntax for I<creating> C<Cat> objects has changed, the syntax for
I<using> C<Cat> objects has not. Outside of C<Cat>, C<age()> behaves as it
always has. I<How> it works is a detail hidden inside the C<Cat> class.

=begin tip Compatibility and APIs

Retain the old syntax for I<creating> C<Cat> objects by customizing the
generated C<Cat> constructor to allow passing an C<age> parameter. Calculate
C<birth_year> from that. See C<perldoc Moose::Manual::Attributes>.

=end tip

X<attributes; default values>

This change offers another advantage; a I<default attribute value> will let
users construct a new C<Cat> object I<without> providing a birth year:

=begin programlisting

    package Cat {
        use Moose;

        has 'name', is => 'ro', isa => 'Str';
        has 'diet', is => 'rw', isa => 'Str';

        B<< has 'birth_year', >>
            B<< is      => 'ro', >>
            B<< isa     => 'Int', >>
            B<< default => sub { (localtime)[5] + 1900 }; >>
    }

=end programlisting

The C<default> keyword on an attribute uses a function reference (or a literal
string or number) which returns the default value for that attribute when
constructing a new object. If the code creating an object passes no constructor
value for that attribute, the object gets the default value:

=begin programlisting

    my $kitten = Cat->new( name => 'Hugo' );

=end programlisting

... and that kitten will have an age of C<0> until next year.

=head3 Polymorphism

The real power of object orientation goes beyond classes and encapsulation. A
well-designed OO program can manage many types of data. When well-designed
classes encapsulate specific details of objects into the appropriate places,
something curious happens: the code often becomes I<less> specific.

Moving the details of what the program knows about individual C<Cat>s (the
attributes) and what the program knows that C<Cat>s can do (the methods) into
the C<Cat> class means that code that deals with C<Cat> instances can happily
ignore I<how> C<Cat> does what it does.

Consider a function which displays details of an object:

=begin programlisting

    sub show_vital_stats {
        my $object = shift;

        say 'My name is ', $object->name;
        say 'I am ',       $object->age;
        say 'I eat ',      $object->diet;
    }

=end programlisting

X<genericity>
X<OO; genericity>

This function obviously works if you pass it a C<Cat> object. It will also do
the right thing for I<any> object with the appropriate three accessors, no
matter I<how> that object provides those accessors and no matter I<what kind>
of object it is: C<Cat>, C<Caterpillar>, or C<Catbird>, or even if the class
uses Moose at all. C<show_vital_stats()> cares that an invocant is valid only
in that it supports three methods, C<name()>, C<age()>, and C<diet()> which
take no arguments and each return something which can concatenate in a string
context. Your code may have a hundred different classes with no obvious
relationship between them, but they will all work with this function if they
support the behavior it expects.

X<polymorphism>
X<OO; polymorphism>

This property is I<polymorphism>: you can substitute an object of one class for
an object of another class if they provide the same external interface.

=begin tip Duck Typing

X<duck typing>
X<OO; duck typing>

Some languages and environments require you to imply or declare a formal
relationship between two classes before allowing a program to substitute
instances for each other. Perl makes no such requirement. You may treat any two
instances with methods of the same name as equivalent. Some people call this
I<duck typing>, arguing that any object which can C<quack()> is sufficiently
duck-like that you can treat it as a duck.

=end tip

Without object polymorphism, enumerating a zoo's worth of animals would be
tedious. Similarly, you may already start to see how calculating the age of an
ocelot or octopus should be the same as calculating the age of a C<Cat>. Hold
that thought.

Of course, the mere existence of a method called C<name()> or C<age()> does not
by itself imply the behavior of that object. A C<Dog> object may have an
C<age()> which is an accessor such that you can discover C<$rodney> is 13 but
C<$lucky> is 8. A C<Cheese> object may have an C<age()> method that lets you
control how long to stow C<$cheddar> to sharpen it. C<age()> may be an accessor
in one class but not in another:

=begin programlisting

    # how old is the cat?
    my $years = $zeppie->age;

    # store the cheese in the warehouse for six months
    $cheese->age;

=end programlisting

Sometimes it's useful to know I<what> an object does and what that I<means>.

=head2 Roles

Z<roles>

X<roles>

A I<role> is a named collection of behavior and state. (Many of the ideas come
from Smalltalk traitsN<U<http://scg.unibe.ch/research/traits>.>) While a class
organizes behaviors and state into a template for objects, a role organizes a
named collection of behaviors and state. You can instantiate a class, but not a
role. A role is something a class I<does>.

Given an C<Animal> which has an age and a C<Cheese> which can age, one
difference may be that C<Animal> does the C<LivingBeing> role, while the
C<Cheese> does the C<Storable> role:

X<CPAN; C<Moose::Role>>

=begin programlisting

    package LivingBeing {
        use Moose::Role;

        requires qw( name age diet );
    }

=end programlisting

The C<requires> keyword provided by C<Moose::Role> allows you to list methods
that this role requires of its composing classes. Anything which does this role
must supply the C<name()>, C<age()>, and C<diet()> methods. The C<Cat> class
must declare that it performs the role:

=begin programlisting

    package Cat {
        use Moose;

        has 'name', is => 'ro', isa => 'Str';
        has 'diet', is => 'rw', isa => 'Str';

        has 'birth_year',
            is      => 'ro',
            isa     => 'Int',
            default => sub { (localtime)[5] + 1900 };

        B<with 'LivingBeing';>

        sub age { ... }
    }

=end programlisting

X<roles; composition>

The C<with> line causes Moose to I<compose> the C<LivingBeing> role into the
C<Cat> class. Composition ensures all of the attributes and methods of the role
are part of the class. C<LivingBeing> requires any composing class to provide
methods named C<name()>, C<age()>, and C<diet()>. C<Cat> satisfies these
constraints. If C<LivingBeing> were composed into a class which did not provide
those methods, Moose would throw an exception.

=begin tip Order Matters!

The C<with> keyword used to apply roles to a class must occur I<after>
attribute declaration so that composition can identify any generated accessor
methods. This is a side-effect of the implementation of Moose and not an
intrinsic feature of roles.

=end tip

Now all C<Cat> instances will return a true value when queried if they provide
the C<LivingBeing> role. C<Cheese> objects should not:

=begin programlisting

    say 'Alive!' if $fluffy->DOES( 'LivingBeing' );
    say 'Moldy!' if $cheese->DOES( 'LivingBeing' );

=end programlisting

This design technique separates the I<capabilities> of classes and objects from
the I<implementation> of those classes and objects. As implied earlier, the
birth year calculation behavior of the C<Cat> class could itself be a role:

=begin programlisting

    package CalculateAge::From::BirthYear {
        use Moose::Role;

        has 'birth_year',
            is      => 'ro',
            isa     => 'Int',
            default => sub { (localtime)[5] + 1900 };

        sub age {
            my $self = shift;
            my $year = (localtime)[5] + 1900;

            return $year - $self->birth_year;
        }
    }

=end programlisting

Extracting this role from C<Cat> makes the useful behavior available to other
classes. Now C<Cat> can compose both roles:

=begin programlisting

    package Cat {
        use Moose;

        has 'name', is => 'ro', isa => 'Str';
        has 'diet', is => 'rw';

        B<with 'LivingBeing', 'CalculateAge::From::BirthYear';>
    }

=end programlisting

The C<age()> method of C<CalculateAge::From::BirthYear> satisfies the
requirement of the C<LivingBeing> role. Extracting the
C<CalculateAge::From::BirthYear> role has only changed the details of I<how>
C<Cat> calculates an age. It's still a C<LivingBeing>. C<Cat> can choose to
implement its own age or get it from somewhere else. All that matters is that
it provides an C<age()> which satisfies the C<LivingBeing> constraint.

X<allomorphism>
X<roles; allomorphism>

While polymorphism means that you can treat multiple objects with the same
behavior in the same way, I<allomorphism> means that an object may implement
the same behavior in multiple ways. Pervasive allomorphism can reduce the size
of your classes and increase the amount of code shared between them. It also
allows you to name specific and discrete collections of behaviors--very useful
for testing for capabilities instead of implementations.

=head3 Roles and DOES()

X<C<DOES()>>
X<Moose; C<DOES()>>

When you compose a role into a class, the class and its instances will return a
true value when you call C<DOES()> on them:

=begin programlisting

    say 'This Cat is alive!' if $kitten->DOES( 'LivingBeing' );

=end programlisting

=head2 Inheritance

Z<inheritance>

X<inheritance>
X<OO; inheritance>
X<Moose; inheritance>

Perl's object system supports I<inheritance>, which establishes a parent and
child relationship between two classes such that a child specializes its
parent. The child class behaves the same way as its parent--it has the same
number and types of attributes and can use the same methods. It may have
additional data and behavior, but you may substitute any instance of a child
where code expects its parent. In one sense, a subclass provides the role
implied by the existence of its parent class.

=begin tip Roles versus Inheritance

Should you use roles or inheritance? Roles provide composition-time safety,
better type checking, better factoring of code, and finer-grained control over
names and behaviors, but inheritance is more familiar to experienced developers
of other languages. Use inheritance when one class truly I<extends> another.
Use a role when a class needs additional behavior, especially when that
behavior has a meaningful name.

X<OO; mixins>
X<OO; multiple inheritance>
X<OO; monkeypatching>

Roles compare favorably to other design techniques such as mixins, multiple
inheritance, and
monkeypatchingN<U<http://www.modernperlbooks.com/mt/2009/04/the-why-of-perl-roles.html>>.

=end tip

Consider a C<LightSource> class which provides two public attributes
(C<enabled> and C<candle_power>) and two methods (C<light> and C<extinguish>):

=begin programlisting

    package LightSource {
        use Moose;

        has 'candle_power', is      => 'ro',
                            isa     => 'Int',
                            default => 1;

        has 'enabled', is      => 'ro',
                       isa     => 'Bool',
                       default => 0,
                       writer  => '_set_enabled';

        sub light {
            my $self = shift;
            $self->_set_enabled( 1 );
        }

        sub extinguish {
            my $self = shift;
            $self->_set_enabled( 0 );
        }
    }

=end programlisting

Note that C<enabled>'s C<writer> option creates a private accessor usable
within the class to set the value.

=head3 Inheritance and Attributes

A subclass of C<LightSource> could define an industrial-strength super candle
with a hundred times the luminance:

=begin programlisting

    package SuperCandle {
        use Moose;

        B<extends 'LightSource'>;

        has 'B<+>candle_power', default => 100;
    }

=end programlisting

X<Moose; C<extends>>

C<extends> takes a list of class names to use as parents of the current class.
If that were the only line in this class, C<SuperCandle> objects would behave
in the same ways as C<LightSource> objects. A C<SuperCandle> instance would
have both the C<candle_power> and C<enabled> attributes as well as the
C<light()> and C<extinguish()> methods.

The C<+> at the start of an attribute name (such as C<candle_power>) indicates
that the current class does something special with that attribute. Here the
super candle overrides the default value of the light source, so any new
C<SuperCandle> created has a light value of 100 regular candles.

When you invoke C<light()> or C<extinguish()> on a C<SuperCandle> object, Perl
will look in the C<SuperCandle> class for the method. If there's no method by
that name in the child class, Perl will look at the parent class, then
grandparent, and so on. In this case, those methods are in the C<LightSource>
class.

X<Moose; attribute inheritance>

Attribute inheritance works similarly (see C<perldoc Class::MOP>).

=head3 Method Dispatch Order

X<methods; resolution>
X<method resolution order>
X<methods; dispatch order>
X<multiple inheritance>
X<objects; inheritance>
X<objects; multiple inheritance>
X<MRO>

X<dispatch>
X<method dispatch>
X<OO; dispatch>
X<OO; method dispatch>

Perl's I<dispatch> strategy controls how Perl selects the appropriate method to
run for a method call. As you may have gathered from roles and polymorphism,
much of OO's power comes from method dispatch.

I<Method dispatch order> (or I<method resolution order> or I<MRO>) is obvious
for single-parent classes. Look in the object's class, then its parent, and so
on until you find the method--or run out of parents. Classes which inherit from
multiple parents (I<multiple inheritance>), such as a C<Hovercraft> which
extends both C<Boat> and C<Car>, require trickier dispatch. Reasoning about
multiple inheritance is complex, so avoid multiple inheritance when possible.

Perl uses a depth-first method resolution strategy. It searches the class of
the I<first> named parent and all of that parent's parents recursively before
searching the classes of the current class's immediate parents. The C<mro>
pragma (L<pragmas>) provides alternate strategies, including the C3 MRO
strategy which searches a given class's immediate parents before searching any
of their parents.

See C<perldoc mro> for more details.

=head3 Inheritance and Methods

X<Moose; overriding methods>
X<Moose; C<override>>

As with attributes, subclasses may override methods. Imagine a light that you
cannot extinguish:

=begin programlisting

    package Glowstick {
        use Moose;

        extends 'LightSource';

        sub extinguish {}
    }

=end programlisting

Calling C<extinguish()> on a glowstick does nothing, even though
C<LightSource>'s method does something. Method dispatch will find the
subclass's method. You may not have meant to do this. When you do, use Moose's
C<override> to express your intention clearly.

Within an overridden method, Moose's C<super()> allows you to call the
overridden method:

=begin programlisting

    package LightSource::Cranky {
        use Carp 'carp';
        use Moose;

        extends 'LightSource';

        B<override> light => sub {
            my $self = shift;

            carp "Can't light a lit LightSource!" if $self->enabled;

            B<super()>;
        };

        B<override> extinguish => sub {
            my $self = shift;

            carp "Can't extinguish unlit LightSource!" unless $self->enabled;

            B<super()>;
        };
    }

=end programlisting

This subclass adds a warning when trying to light or extinguish a light source
that already has the current state. The C<super()> function dispatches to the
nearest parent's implementation of the current method, per the normal Perl
method resolution order. (See C<perldoc Moose::Manual::MethodModifiers> for
more dispatch options.)

=head3 Inheritance and isa()

X<C<isa()>>
X<Moose; C<isa()>>

Perl's C<isa()> method returns true if its invocant is or extends a named
class. That invocant may be the name of a class or an instance of an object:

=begin programlisting

    say 'Looks like a LightSource' if $sconce->isa( 'LightSource' );

    say 'Hominidae do not glow' unless $chimpy->isa( 'LightSource' );

=end programlisting

=head2 Moose and Perl OO

X<Moose; compared to default Perl OO>

Moose provides many features beyond Perl's default OO system. While you I<can>
build everything you get with Moose yourself (L<blessed_references>), or cobble
it together with a series of CPAN distributions, Moose is worth using. It is a
coherent whole, with documentation, a mature and attentive development
community, and a history of successful use in important projects.

Moose provides constructors, destructors, accessors, and encapsulation. You
must do the work of declaring what you want, and you get safe and useful code
in return. Moose objects can extend and work with objects from the vanilla Perl
system.

While Moose is not a part of the Perl core, its popularity ensures that it's
available on many OS distributions. Perl distributions such as Strawberry Perl
and ActivePerl also include it. Even though Moose is a CPAN module and not a
core library, its cleanliness and simplicity make it essential to modern Perl
programming.

X<metaprogramming>
X<Moose; MOP>
X<Moose; metaprogramming>
X<C<Class::MOP>>
X<C<Class::MOP::Class>>

Moose also allows I<metaprogramming>--manipulating your objects through Moose
itself. If you've ever wondered which methods are available on a class or an
object or which attributes an object supports, this information is available:

=begin programlisting

    my $metaclass = Monkey::Pants->meta;

    say 'Monkey::Pants instances have the attributes:';

    say $_->name for $metaclass->get_all_attributes;

    say 'Monkey::Pants instances support the methods:';

    say $_->fully_qualified_name for $metaclass->get_all_methods;

=end programlisting

You can even see which classes extend a given class:

=begin programlisting

    my $metaclass = Monkey->meta;

    say 'Monkey is the superclass of:';

    say $_ for $metaclass->subclasses;

=end programlisting

See C<perldoc Class::MOP::Class> for more information about metaclass
operations and C<perldoc Class::MOP> for Moose metaprogramming information.

Moose and its I<meta-object protocol> (or MOP) offers the possibility of a
better syntax for declaring and working with classes and objects in Perl. This
is valid code:

=begin programlisting

    use MooseX::Declare;

    B<role> LivingBeing { requires qw( name age diet ) }

    B<role> CalculateAge::From::BirthYear {
        has 'birth_year',
            is      => 'ro',
            isa     => 'Int',
            default => sub { (localtime)[5] + 1900 };

        B<method> age {
            return (localtime)[5] + 1900 - $self->birth_year;
        }
    }

    B<class Cat with LivingBeing with CalculateAge::From::BirthYear> {
        has 'name', is => 'ro', isa => 'Str';
        has 'diet', is => 'rw';
    }

=end programlisting

X<CPAN; C<MooseX::Declare>>
X<CPAN; C<Moops>>

The C<MooseX::Declare> CPAN distribution adds the C<class>, C<role>, and
C<method> keywords to reduce the amount of boilerplate necessary to write good
object oriented code in Perl.  Note specifically the declarative nature of this
example, as well as the lack of C<my $self = shift;> in C<age()>.

Another good option is C<Moops>, which allows you to write:

=begin programlisting

    use Moops;

    role LivingBeing {
        requires qw( name age diet );
    }

    role CalculateAge::From::BirthYear :ro {
        has 'birth_year',
            isa     => Int,
            default => sub { (localtime)[5] + 1900 };

        method age {
            return (localtime)[5] + 1900 - $self->birth_year;
        }
    }

    class Cat with LivingBeing with CalculateAge::From::BirthYear :ro {
        has 'name', isa => Str;
        has 'diet', is => 'rw';
    }

=end programlisting

=begin tip The Svelte I<Alces>

X<CPAN; C<Moo>>

Moose isn't a small library, but it's powerful. The most popular alternative is
C<Moo>, a slimmer library that's almost completely compatible with Moose. Many
projects migrate some or all code to Moo where speed or memory use is an issue.
Start with Moose, then see if Moo makes sense for you.

=end tip
