=head1 What's Next?

Z<next_steps>

X<CPAN; C<Task::Kensho>>

Although Perl includes an extensive core library, it's not comprehensive. Many
of the best modules are available outside of the core, from the CPAN (L<cpan>).
The C<Task::Kensho> meta-distribution includes several other distributions
which represent the best the CPAN has to offer. When you need to solve a
problem, look there first.

The CPAN has plenty of other gems, though. For example, if you want to:

=over 4

=item * I<Access a database via SQL>, use the C<DBI> module

=item * I<Embed a lightweight, single-file database>, use the C<DBD::SQLite> module

=item * I<Manage your database schemas>, use C<Sqitch>

=item * I<Represent database entities as objects>, use C<DBIx::Class>

=item * I<Perform basic web programming>, use C<Plack>

=item * I<Use a powerful web framework>, use C<Mojolicious>, C<Dancer>, or C<Catalyst>

=item * I<Process structured data files>, use C<Text::CSV_XS> (or C<Text::CSV>)

=item * I<Manage module installations for applications>, use C<Carton>

=item * I<Manipulate numeric data>, use C<PDL>

=item * I<Manipulate images>, use C<Imager>

=item * I<Access shared libraries>, use C<FFI::Platypus>

=item * I<Extract data from XML files>, use C<XML::Rabbit>

=item * I<Keep your code tidy>, use C<Perl::Tidy>

=item * I<Watch for problems beyond strictures and warnings>, use C<Perl::Critic>

=back

... and the list goes on. Skim the CPAN recent uploads
pageN<U<http://search.cpan.org/recent>> frequently to see what's new and what's
updated.

=head2 Thinking in Perl

As is true of any creative endeavor, learning Perl never stops. While "Modern
Perl" describes how the best Perl programmers approach their craft, their
techniques and tools always evolve. What's great in 2015 and 2016 might not
have been imagined even five years ago--and the greatness of 2020 and beyond
might be mere inklings in the mind of an enterprising Perl hacker right now.

Now you have the chance to shape that future. It's up to you to continue
discovering how to make Perl work for you and how to make Perl better, whether
learning from the global Perl community, perusing the documentation of the core
and CPAN modules, and by careful practice, discovering what works for you and
what helps you write the right code.

Perl's not perfect (though it improves, year after year, release after
release). It can be as clean or as messy as you need it to be, depending on the
problems you have to solve. It's up to you to use it well.

As a wise person once said, "May you do good things with Perl."
